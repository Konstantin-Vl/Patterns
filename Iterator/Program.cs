using System;
using System.Collections;

namespace Iterator
{
    class Program
    {
        /*Паттерн "Итератор"
         * предоставляет механизм последовательного перебора элементом коллекции без раскрытия ее внутреннего представления.
         * Все довольно просто - создали новый класс, в котором реализовали наш собственный интерфейс IIterator. В них определили небольшую логику как 
         * проверять и какой элемент коллекции возращать. Затем просто добавили в нужном классе метод по созданию нужного нам итератора. И все.
         * Стоит отметить, что существуют стандартные средства в C#  - такие как IEnumerable и IEnumerator
         * 
         * P.S.
         * Как раз таки и было переделенно приложение с использованием IEnumerable
         * К тому же стоит обратить внимание на то как хранятся меню - у нас три разных меню. Сохраняем их в ArrayList. Затем получаем итератор для данного
         * массива, проходим по каждому элементу - это как раз токи наши меню. Они наследуются от отдного интерфейса - IEnumerable. И получив меню - вызываем
         * для каждого из них фунцию печати, передав туда в качестве параметра итератор для данного меню
         */
        static void Main(string[] args)
        {
            var waitress = new Waitress(new ArrayList { new PancakeHouseMenu(), new DinnerMenu(), new CaffeMenu() });
            waitress.PrintMenu();
           
            Console.ReadKey(true);
        }
    }
}
