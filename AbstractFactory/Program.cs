using System;
using AbstractFactory.PizzaStore;

namespace AbstractFactory
{
    /* Паттерт "Абстрактная фабрика" 
     * Представляет собой интерфейс создания семейств взаимосвязанных и взаимозависимых объектов без указания конкретных классов
     * Для начала создаются фабрики ингридиентов. Для этого создаем интерфейс IIngridientFactory, в котором описываем основные методы работы фабрики ингридиетов -
     * какие ингридиенты должны уметь производить реальные фабрики. Затем создаем конкртретные реализации. К примеру возьмем NyIngridientFactory - она реализует
     * описаный выше интерфейс. В каждом методе возвращаются новые объекты ингридиентов - которые унаследуются от базовых онгридиентов. Все, фабрики ингридиентов
     * создана. Далее нужно создать конкретную пиццу. У нас есть абстрактый класс Pizza - описывает базовый функционал. Теперь будем создавать конкретные пиццы.
     * В отличии от абстрактного метода мы не будем для каждого базового типа пиццы создавать региональный. Просто создадим базовые, к примеру CheezePizza - 
     * наследуется от абстрактного класса Pizza - и самое главное хранит ссылку на базовый интерфейс абстрактной фабрики ингридиентов IIngridientFactory.
     * Стоит обратить внимание на метод Prepare() - так как этот метод объявлен абстрактным в классе Pizza - дочерние классы обязанны его реализовать.
     * Вот там мы и вызываем методы фабрики ингридиентов. И самое главное - на данном этапе мы ничего не знаем какая конкретная реализация фабрики ингридиентов
     * к нам придет, какую реализацию ингридиентов она вернет - в этом и вся соль, наши обьекты получаются слабосвязанными.
     * Теперь нужно реализовать магазины продажи пиццы - как всегда, есть базовый абстракный класс PizzaStore - c двумя методами OrderPizza и CreatePizza
     * Причем CreatePizza - абстрактный метод. OrderPizza - вызывает метод CreatePizza с нужным типом пиццы и приготавляет пиццу. Далее создаем конкретные реализации
     * PizzaStore - к примеру NyPizzaStore. Как раз токи здесь мы будем создавать пиццы и передавать им конкретную реализацию фабрики ингридиентов - в данном случае
     * NyIngridientFactory. Вот и все. Вся суть абстрактной фабрики что мы создали наши семейства продуктов (фабрики ингридиентов), и в нужный момент передаем их
     * нашим пиццам - причем пиццы для всех регионов одни - но говотовятся по разному,  разными ингридиентами - вот тут и помогла нам фабрика ингридиентов
     */

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("I want one Cheeze pizza by NY recipe");
            var nyPizzaStore = new NyPizzaStore();
            var nyCheezePizza = nyPizzaStore.OrderPizza(PizzaType.CheezePizza);



            Console.ReadKey(true);
        }
    }
}
